{
  "faq_id": 1120798639422331823,
  "language": 0,
  "version": 7,
  "content": "[h1]Intro[/h1]\nFor a non-technical overview of the replay feature, you can view the press release [url=http://store.steampowered.com/news/5416/]here[/url].\n\nAt its core, Replay is an extension of SourceTV. The feature must be enabled on the server side, and the \u0022demo\u0022 files that are ultimately generated include the full PVS, meaning everyone\u0027s perspective is recorded. Regular demos, on the other hand, only record the local player\u0027s perspective.\n\nAt the beginning of the \u0022setup\u0022 phase for a round of gameplay, the Replay system will begin recording if enabled (via the replay_enable ConVar). The round, also known as a [i]recording session[/i], is given a unique name based on the date and time of the recording. As the round/recording session progresses, small blocks of data are periodically [i]published[/i] to a [i]fileserver[/i] where they can be downloaded by clients.\n\n[h4]Replay File Types[/h4]\nThere are two types of files that are published:\n\n1. [b]Recording Session Blocks[/b] - These files are essentially compressed chunks of a demo file. When a client saves a Replay, the system figures out how many blocks it needs to download in order to play back the corresponding file. When the client goes to play back a particular Replay, the blocks are decompressed, validated, and written to one monolithic demo file for the game to play.\n\n2. [b]Session Info Files[/b] - Each round/recording session has one session info file, which maintain the state of all recording session blocks. The files use the extension .dmx, and are updated every time a block\u0027s status changes. Clients download the session info file for a particular replay multiple times if all blocks are not available (e.g. if they\u0027re still being published or not enough time has passed). Session info files also maintain a flag, indicating whether the session is currently recording or not.\n\nThere is no client-specific data in recording session blocks or session info files, since any resultant demo file contains everyone\u0027s perspective. Each client records its own player slot information, so that watching the replay can start from the correct first-person perspective.\n\nWhen a client requests to save a replay, it must download all blocks, starting from the beginning of the round. For the curious, the reason for this is that the demo files are \u0022delta compressed\u0022 - which means that every \u0022frame\u0022 in the demo is dependent on the previous frame. While this is not ideal, it should be noted that clients are smart about which blocks need to be downloaded, meaning that for any particular round, each block will only be downloaded once.\n\n[h4]Publishing[/h4]\nThere are two ways a Replay server can publish files for clients to download:\n\n1. [b]Local Web server[/b] - This method requires the installation of a Web server on the same machine as the game server. To publish a given file, the server will write it to a temporary location on disk, and then move (rename) it to a local path that the Web server sees. If the rename operation fails, the system will explicitly copy to the destination and delete the source file.\n\nThe advantage of this approach is that some may find it more secure, and it requires less work to configure.\n\nThere are several disadvantages to consider here. The main issue is that clients downloading from the Web server may be using bandwidth and CPU needed to run the game server smoothly. This approach is also particularly costly for the game server in terms of bandwidth, since the cost is multiplied by however many clients are downloading the files. Lastly, this approach may open your server up to potential \u0022Denial of Service\u0022 attacks if proper security measures are not taken. For faster machines with faster connections, this approach may be preferred.\n\n2. [b]FTP Offloading[/b] - The alternative approach requires access to a second machine, which must be running both an FTP server and a Web server. The Replay system will asynchronously offload Replay files from the game server to this second machine via FTP. The Web server must point to the same location on disk so that it can serve the uploaded files to clients.\n\nThe main advantage to this approach is that the burden of serving the Replay data is lifted off of the game server machine and put onto another machine. The bandwidth cost is minimized, since each replay block file is only streamed (uploaded) once, vs the Local Web server approach, where, for example, every single client who saves a replay for a particular round is going to download the first block file.\n\nFTP is not a secure protocol, so caution should be taken to make sure login credentials do not become vulnerable to exposure.\n\n[h4]Configuring Replay[/h4]\nThere will be three replay related .cfg files with detailed comments in each. You will only need to worry about two of the files.\n\nreplay_local_http.cfg - Edit this file if you plan on using the \u0022Local Web server\u0022 method described above.\n\nreplay_ftp.cfg - Edit this file if you plan on using the \u0022FTP Offloading\u0022 method described above.\n\nreplay.cfg - Edit the bottom of this file to execute either replay_local_http.cfg or replay_ftp.cfg. This is the main configuration file for Replay and should be executed on server launch (i.e. \u0022\u002Bexec replay.cfg\u0022).\n\nRegardless of which publishing method you choose for your server, you\u0027ll need to set the following three ConVars:\n\n[b]replay_fileserver_host\n\nreplay_fileserver_port\n\nreplay_fileserver_path[/b]\n\nThese ConVars are shared with clients and are used to construct the URLs for downloading recording session blocks and session info files.\n\nThe URL is constructed using the following as a template:\n\nhttp:// (replay_fileserver_host) : (replay_fileserver_port) (replay_fileserver_path)\n\nSo, as an example, if you have a Web server running on [i]my.domain.com[/i] on port 80, you would set replay_fileserver_host to \u0022my.domain.com\u0022 and replay_fileserver_port to 80. replay_fileserver_path should be set to the relative path where replay files will be published, so this would be something like \u0022/\u0022 or \u0022/replay\u0022. Note that none of these ConVars should contain \u0022http://\u0022. You also do not want to include any slashes in your replay_fileserver_host.\n\nIf you cannot successfully point a Web browser to the URL constructed by replacing the template above with the values you have specified for the three fileserver ConVars, clients will not be able to download their Replays.\n\n[h4]Configuring replay_local_http.cfg[/h4]\nYou will only need to edit replay_local_fileserver_path, which is the full path for the Web server. For Apache on a Windows machine, using the replay_fileserver_* ConVars above, this path might be something like:\n\n\u0022C:\\MyWebServer\\htdocs\\replay\u0022\n\nOn Linux, this might be something like:\n\n\u0022/path/to/my/web/server/htdocs/replay\u0022\n\n[h4]Configuring replay_ftp.cfg[/h4]\n\nYou will need to edit the following ConVars, which are used to login and upload and clean up Replay files:\n\n[b]replay_fileserver_offload_hostname[/b] - The host name of your FTP server.\n\n[b]replay_fileserver_offload_port[/b] - The port needed to connected to your FTP server. This is usually 21.\n\n[b]replay_fileserver_offload_login[/b] - Your FTP username.\n\n[b]replay_fileserver_offload_password[/b] - Your FTP password.\n\n[b]replay_fileserver_offload_remotepath[/b] - The path on the FTP server where Replay files should be uploaded. For example, \u0022/users/myusername/replay\u0022\n\n[h4]Testing Your Replay Configuration[/h4]\nOnce you\u0027ve edited the config files, you can test everything by start a dedicated server, making sure to include [b]\u002Bexec replay.cfg[/b] to the command line parameters.\n\nOnce the game launches, the Replay system will run a series of self-tests using your configuration. Depending on the publishing method you chose, the system will either try to publish a temporary file to your local HTTP path or publish a file to your FTP server. At the time of this writing, your replay_fileserver_* ConVars will not be validated - you should do this yourself by filling out the template URL noted in the \u0022Configuring Replay\u0022 section above and pointing a Web browser to that location.\n\n[h4]Cleanup of Stale Replay Data[/h4]\nReplay files are considered \u0022stale\u0022 if they were published more than replay_data_lifespan days ago. An asynchronous cleanup operation is launched in between every round, although it can be cleaned up explicitly using the replay_docleanup command.\n\n\n[h1]Frequently Asked Questions[/h1]\n[b]I want to run a Replay-enabled server. Where do I start? [/b]\nRead this document, from beginning to the end.\n\n[b]I\u0027m running multiple servers on the same machine. Is there a way to specify a different directory for each server? [/b]\nYes. Add -replayserverdir \u003Cdir name\u003E to each server command line. The directory name should be something like \u0022server01\u0022 or \u0022server02,\u0022 and not a full path.\n\n[b]When a client presses the F6 key, what exactly does that do? [/b]\nOn the client side, number of kills, spawn and death ticks, dominations, etc are maintained on a per-life basis. If a life goes by and the client does not press F6, the data is thrown away. If a client does press F6, however, this data gets flagged and is saved to disk. Once the player dies (if they weren\u0027t already dead when the pressed F6), the death tick is written and the system figures out the maximum recording session block needed to reconstruct a demo that will cover the entire life.\n\n[b]If no one saves a Replay for a particular round, does the data get thrown away?[/b]\nYes.\n\n[b]Does Replay record on an empty server?[/b]\nNo. Replay begins recording at the start of the \u0022setup\u0022 phase and ends with each round.\n\n[b]If clients disconnect from my server, will they still be able to download their Replay data?[/b]\nYes. Since Replay data is served on a Web server (and not on the game server itself), clients can download replays after disconnecting.\n\n[b]Will executing a changelevel command disrupt recording or publishing of Replay data?[/b]\nNo.\n\n[b]Will shutting down my server mess up Replays?[/b]\nIf you shut down your server using the \u0022exit\u0022 command, it should publish any data it needs to and shut down gracefully. The \u0022quit\u0022 command should work fine, too.\n\n",
  "title": "Team Fortress 2 Replay Server Overview"
}